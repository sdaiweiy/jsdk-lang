{"code":"import IObject from \"./IObject\";\r\nvar IArray = (function () {\r\n    function IArray() {\r\n    }\r\n    IArray.add = function (array, item, index) {\r\n        if (index === void 0) { index = array.length; }\r\n        array.splice(index, 0, item);\r\n    };\r\n    IArray.addAll = function (array) {\r\n        var source = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            source[_i - 1] = arguments[_i];\r\n        }\r\n        for (var i = 0, len = source.length; i < len; i++) {\r\n            var sub = source[i];\r\n            for (var j = 0, len1 = sub.length; j < len1; j++) {\r\n                array.push(sub[j]);\r\n            }\r\n        }\r\n        return array;\r\n    };\r\n    IArray.clear = function (array) {\r\n        array.length = 0;\r\n    };\r\n    IArray.clone = function (array) {\r\n        return array.slice(0);\r\n    };\r\n    IArray.contains = function (array, item) {\r\n        return this.indexOf(array, item) !== -1;\r\n    };\r\n    IArray.each = function (array, iterator) {\r\n        for (var i = 0, len = array.length; i < len; i++) {\r\n            if (iterator(i, array[i], array) === false) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    IArray.filter = function (array, fn) {\r\n        var result = [];\r\n        this.each(array, function (index, item) {\r\n            if (fn(index, item, array)) {\r\n                result.push(item);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    IArray.indexOutOfBounds = function (array, index) {\r\n        return index < 0 || index >= array.length;\r\n    };\r\n    IArray.isArray = function (object) {\r\n        if (!Array.isArray) {\r\n            return Object.prototype.toString.call(object) === '[object Array]';\r\n        }\r\n        return Array.isArray(object);\r\n    };\r\n    IArray.isNullOrEmpty = function (array) {\r\n        return !this.isArray(array) || array.length == 0;\r\n    };\r\n    IArray.isNotNullOrEmpty = function (array) {\r\n        return !this.isNullOrEmpty(array);\r\n    };\r\n    IArray.indexOf = function (array, item, index) {\r\n        if (index === void 0) { index = 0; }\r\n        for (var i = index, length_1 = array.length; i < length_1; i++) {\r\n            if (IObject.equals(array[i], item)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    IArray.join = function (array, separator) {\r\n        return Array.prototype.join.call(array, separator);\r\n    };\r\n    IArray.lastIndexOf = function (array, item) {\r\n        for (var len = array.length - 1; len >= 0; len--) {\r\n            if (IObject.equals(array[len], item)) {\r\n                return len;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    IArray.remove = function (array, index) {\r\n        if (this.indexOutOfBounds(array, index)) {\r\n            throw new RangeError(\"index out of bounds\");\r\n        }\r\n        return array.splice(index, 1)[0];\r\n    };\r\n    IArray.removeByValue = function (array, item) {\r\n        return this.remove(array, this.indexOf(array, item));\r\n    };\r\n    IArray.removeRange = function (array, startIndex, endIndex) {\r\n        if (this.indexOutOfBounds(array, startIndex) || this.indexOutOfBounds(array, endIndex)) {\r\n            throw new RangeError(\"startIndex or endIndex out of bounds\");\r\n        }\r\n        return array.splice(startIndex, (endIndex - startIndex));\r\n    };\r\n    IArray.reverse = function (array) {\r\n        return array.reverse();\r\n    };\r\n    IArray.sort = function (array, fn) {\r\n        return fn ? array.sort(fn) : array.sort();\r\n    };\r\n    IArray.subArray = function (array, startIndex, endIndex) {\r\n        if (endIndex === void 0) { endIndex = array.length; }\r\n        if (this.indexOutOfBounds(array, startIndex) || this.indexOutOfBounds(array, endIndex - 1)) {\r\n            throw new RangeError(\"startIndex or endIndex out of bounds\");\r\n        }\r\n        return Array.prototype.slice.call(array, startIndex, endIndex);\r\n    };\r\n    IArray.toJson = function (array) {\r\n        var result = [\"[\", \"\"], len = array.length, i;\r\n        for (i = 0; i < len; i += 1) {\r\n            var val = IObject.toJson(array[i]);\r\n            if (val) {\r\n                result.push(val, ',');\r\n            }\r\n        }\r\n        result[result.length - 1] = ']';\r\n        return result.join(\"\");\r\n    };\r\n    IArray.toString = function (array) {\r\n        return Array.prototype.toString.call(array);\r\n    };\r\n    return IArray;\r\n}());\r\nexport default IArray;\r\n"}
