{"code":"import IArray from './IArray';\r\nimport IDate from './IDate';\r\nimport IString from './IString';\r\nimport IBoolean from \"./IBoolean\";\r\nimport IFunction from \"./IFunction\";\r\nimport INumber from \"./INumber\";\r\nvar IObject = (function () {\r\n    function IObject() {\r\n    }\r\n    IObject.isDefined = function (object) {\r\n        return !this.isUndefined(object);\r\n    };\r\n    IObject.isUndefined = function (object) {\r\n        return object == undefined;\r\n    };\r\n    IObject.isObject = function (object) {\r\n        return 'function' == typeof object || !!(object && 'object' == typeof object);\r\n    };\r\n    IObject.isPlain = function (object) {\r\n        if (!IObject.isObject(object)) {\r\n            return false;\r\n        }\r\n        if (object.constructor &&\r\n            !this.hasOwn.call(object, \"constructor\") &&\r\n            !this.hasOwn.call(object.constructor.prototype, \"isPrototypeOf\")) {\r\n            return false;\r\n        }\r\n        for (var _name in object) {\r\n            return false;\r\n        }\r\n        if (object.item && typeof object.length == \"number\") {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    IObject.equals = function (source, target) {\r\n        return deepEquals(source, target);\r\n    };\r\n    IObject.extend = function (target) {\r\n        var source = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            source[_i - 1] = arguments[_i];\r\n        }\r\n        target = target || {};\r\n        for (var i = 0; i < source.length; i++) {\r\n            var obj = source[i];\r\n            if (!obj)\r\n                continue;\r\n            for (var key in source[i]) {\r\n                if (source[i].hasOwnProperty(key)) {\r\n                    target[key] = source[i][key];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    IObject.deepExtend = function (target) {\r\n        var source = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            source[_i - 1] = arguments[_i];\r\n        }\r\n        target = target || {};\r\n        for (var i = 0; i < source.length; i++) {\r\n            var obj = source[i];\r\n            if (!obj)\r\n                continue;\r\n            for (var key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    if (this.isObject(obj[key])) {\r\n                        target[key] = this.deepExtend(target[key], obj[key]);\r\n                    }\r\n                    else {\r\n                        target[key] = obj[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    IObject.clone = function (object) {\r\n        return this.deepExtend({}, object);\r\n    };\r\n    IObject.keys = function (object) {\r\n        if (this.hasOwn.call(Object, \"keys\")) {\r\n            return Object.keys(object);\r\n        }\r\n        var keys = [];\r\n        for (var key in object) {\r\n            if (this.hasOwn.call(object, key)) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    IObject.values = function (object) {\r\n        var values = [], keys = this.keys(object);\r\n        for (var i = 0, len = keys.length; i < len; i++) {\r\n            values.push(object[keys[i]]);\r\n        }\r\n        return values;\r\n    };\r\n    IObject.hasKey = function (object, key) {\r\n        return object != null && this.hasOwn.call(object, key);\r\n    };\r\n    IObject.each = function (object, fn) {\r\n        IArray.each(this.keys(object), function (i, key) {\r\n            return fn.call(object, key, object[key], object);\r\n        });\r\n    };\r\n    IObject.toJson = function (object) {\r\n        if (JSON && JSON.stringify) {\r\n            return JSON.stringify(object);\r\n        }\r\n        if (this.isUndefined(object) || IFunction.isFunction(object)) {\r\n            return null;\r\n        }\r\n        else if (IBoolean.isBoolean(object)) {\r\n            return IBoolean.toJson(object);\r\n        }\r\n        else if (IString.isString(object)) {\r\n            return IString.toJson(object);\r\n        }\r\n        else if (IArray.isArray(object)) {\r\n            return IArray.toJson(object);\r\n        }\r\n        else if (INumber.isNumber(object)) {\r\n            return INumber.toJson(object);\r\n        }\r\n        else if (IDate.isDate(object)) {\r\n            return IDate.toJson(object);\r\n        }\r\n        else if (IObject.isObject(object)) {\r\n            var array_1 = [\"{\", \"\"];\r\n            IObject.each(object, function (i, key, value) {\r\n                if (object.hasOwnProperty(key)) {\r\n                    if (!IFunction.isFunction(value) && value !== undefined) {\r\n                        array_1.push(IObject.toJson(i), \":\", IObject.toJson(value), ',');\r\n                    }\r\n                }\r\n            });\r\n            array_1[array_1.length - 1] = '}';\r\n            return array_1.join(\"\");\r\n        }\r\n        else if (object.toJson) {\r\n            return object.toJson();\r\n        }\r\n        return '';\r\n    };\r\n    IObject.parseJson = function (data) {\r\n        try {\r\n            if (JSON && JSON.parse) {\r\n                return JSON.parse(data);\r\n            }\r\n            return (new Function(\"return \" + data))();\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    IObject.hasOwn = Object.prototype.hasOwnProperty;\r\n    return IObject;\r\n}());\r\nexport default IObject;\r\nvar deepEquals = function (a, b, aStack, bStack) {\r\n    if (aStack === void 0) { aStack = []; }\r\n    if (bStack === void 0) { bStack = []; }\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    if (a == null || b == null) {\r\n        return false;\r\n    }\r\n    if (a !== a) {\r\n        return b !== b;\r\n    }\r\n    var type = typeof a;\r\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') {\r\n        return false;\r\n    }\r\n    var toString = Object.prototype.toString;\r\n    var className = toString.call(a);\r\n    if (className !== toString.call(b)) {\r\n        return false;\r\n    }\r\n    switch (className) {\r\n        case '[object RegExp]':\r\n        case '[object String]':\r\n            return '' + a === '' + b;\r\n        case '[object Number]':\r\n            if (+a !== +a) {\r\n                return +b !== +b;\r\n            }\r\n            return +a === +b;\r\n        case '[object Date]':\r\n        case '[object Boolean]':\r\n            return +a === +b;\r\n    }\r\n    var areArrays = className === '[object Array]';\r\n    if (!areArrays) {\r\n        if (typeof a != 'object' || typeof b != 'object') {\r\n            return false;\r\n        }\r\n        var aCtor = a.constructor, bCtor = b.constructor;\r\n        if (aCtor !== bCtor && !(IFunction.isFunction(aCtor) && aCtor instanceof aCtor &&\r\n            IFunction.isFunction(bCtor) && bCtor instanceof bCtor)\r\n            && ('constructor' in a && 'constructor' in b)) {\r\n            return false;\r\n        }\r\n    }\r\n    var length = aStack.length;\r\n    while (length--) {\r\n        if (aStack[length] === a) {\r\n            return bStack[length] === b;\r\n        }\r\n    }\r\n    if (areArrays) {\r\n        length = a.length;\r\n        if (length !== b.length) {\r\n            return false;\r\n        }\r\n        while (length--) {\r\n            if (!deepEquals(a[length], b[length], aStack, bStack)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        var keys = IObject.keys(a), key = void 0;\r\n        length = keys.length;\r\n        if (IObject.keys(b).length !== length) {\r\n            return false;\r\n        }\r\n        while (length--) {\r\n            key = keys[length];\r\n            if (!(IObject.hasKey(b, key) && deepEquals(a[key], b[key], aStack, bStack))) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    aStack.pop();\r\n    bStack.pop();\r\n    return true;\r\n};\r\n"}
