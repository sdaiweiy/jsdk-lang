{"code":"import IObject from \"./IObject\";\r\nvar IString = (function () {\r\n    function IString() {\r\n    }\r\n    IString.charAt = function (str, index) {\r\n        return str.charAt(index);\r\n    };\r\n    IString.contains = function (str, sbustr) {\r\n        return this.indexOf(str, sbustr) != -1;\r\n    };\r\n    IString.endWith = function (source, suffix) {\r\n        return RegExp(suffix + \"$\").test(source);\r\n    };\r\n    IString.format = function (str, context) {\r\n        if (!context) {\r\n            context = window;\r\n        }\r\n        var replacer = function (str, match) {\r\n            var replacement, subs = match.split(/\\.+/);\r\n            for (var i = 0, len = subs.length; i < len; i++) {\r\n                if (i == 0) {\r\n                    replacement = context;\r\n                }\r\n                if (replacement === undefined) {\r\n                    break;\r\n                }\r\n                replacement = replacement[subs[i]];\r\n            }\r\n            if (typeof replacement == 'undefined') {\r\n                return 'undefined';\r\n            }\r\n            else {\r\n                return replacement;\r\n            }\r\n        };\r\n        return str.replace(/\\{\\{([\\w.]+?)\\}\\}/g, replacer);\r\n    };\r\n    IString.indexOf = function (str, substr, index) {\r\n        if (index === void 0) { index = 0; }\r\n        return str.indexOf(substr, index);\r\n    };\r\n    IString.isBlank = function (str) {\r\n        return !str || this.trim(str) === \"\";\r\n    };\r\n    IString.isEmpty = function (str) {\r\n        return !str || str === \"\";\r\n    };\r\n    IString.isNotBlank = function (str) {\r\n        return !this.isBlank(str);\r\n    };\r\n    IString.isNotEmpty = function (str) {\r\n        return !this.isEmpty(str);\r\n    };\r\n    IString.isNotNullOrEmpty = function (str) {\r\n        return !this.isNullOrEmpty(str);\r\n    };\r\n    IString.isNullOrEmpty = function (str) {\r\n        return IObject.isUndefined(str) || str == \"\";\r\n    };\r\n    IString.isString = function (str) {\r\n        return Object.prototype.toString.call(str) === '[object String]';\r\n    };\r\n    IString.lastIndexOf = function (str, substr, index) {\r\n        if (index === void 0) { index = str.length; }\r\n        return str.lastIndexOf(substr, index);\r\n    };\r\n    IString.padLeft = function (str, size, padStr) {\r\n        if (padStr === void 0) { padStr = \" \"; }\r\n        if (str.length >= size) {\r\n            return str;\r\n        }\r\n        if (!padStr) {\r\n            padStr = \" \";\r\n        }\r\n        var paddingString = new String(), len = Math.floor((size - str.length) / padStr.length), gap = size - (len * padStr.length) - str.length;\r\n        for (var i = 0; i < len; i++) {\r\n            paddingString += padStr;\r\n        }\r\n        paddingString += this.substr(padStr, 0, gap);\r\n        return paddingString + str;\r\n    };\r\n    IString.padRight = function (str, size, padStr) {\r\n        if (padStr === void 0) { padStr = \"\"; }\r\n        if (str.length >= size) {\r\n            return str;\r\n        }\r\n        if (!padStr) {\r\n            padStr = \" \";\r\n        }\r\n        var paddingString = new String(), len = Math.floor((size - str.length) / padStr.length), gap = size - (len * padStr.length) - str.length;\r\n        for (var i = 0; i < len; i++) {\r\n            paddingString += padStr;\r\n        }\r\n        paddingString += this.substr(padStr, 0, gap);\r\n        return str + paddingString;\r\n    };\r\n    IString.replace = function (str, rule, replacement) {\r\n        return str.replace(rule, replacement);\r\n    };\r\n    IString.replaceFirst = function (str, rule, replacement) {\r\n        return str.replace(rule, replacement);\r\n    };\r\n    IString.replaceAll = function (str, findText, replaceText) {\r\n        return str.replace(new RegExp(findText, \"g\"), replaceText);\r\n    };\r\n    IString.split = function (str, separator) {\r\n        return str.split(separator);\r\n    };\r\n    IString.startWith = function (source, prefix) {\r\n        return new RegExp(\"^\" + prefix).test(source);\r\n    };\r\n    IString.stripHTML = function (source) {\r\n        return String(source || '').replace(/<[^>]+>/g, '');\r\n    };\r\n    IString.substr = function (str, start, length) {\r\n        if (length === void 0) { length = str.length; }\r\n        if (start < 0) {\r\n            start = str.length + start;\r\n        }\r\n        return str.substr(start, length);\r\n    };\r\n    IString.substring = function (str, start, stop) {\r\n        if (stop === void 0) { stop = str.length; }\r\n        return str.substring(start, stop);\r\n    };\r\n    IString.toCamelCase = function (source) {\r\n        if (source.indexOf('-') < 0 && source.indexOf('_') < 0) {\r\n            return source;\r\n        }\r\n        return source.replace(/[-_][^-_]/g, function (match) {\r\n            return match.charAt(1).toUpperCase();\r\n        });\r\n    };\r\n    IString.toJson = function (str) {\r\n        return '\"' + str.replace(_CharToReplace, function (a) {\r\n            var c = _Meta[a];\r\n            return IString.isString(c) ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\r\n        }) + '\"';\r\n    };\r\n    IString.toLowerCase = function (str) {\r\n        return str.toLowerCase();\r\n    };\r\n    IString.toString = function (str) {\r\n        return str.toString();\r\n    };\r\n    IString.toUpperCase = function (str) {\r\n        return str.toUpperCase();\r\n    };\r\n    IString.trim = function (str) {\r\n        return str.replace(/^(\\s|\\u3000|\\xa0|\\u00A0)+/, '').replace(/(\\s||\\u3000|\\xa0\\u00A0)+$/, '');\r\n    };\r\n    IString.trimAll = function (str) {\r\n        return str.replace(/\\s|\\u3000|\\xa0|\\u00A0/g, \"\");\r\n    };\r\n    IString.trimLeft = function (str) {\r\n        return str.replace(/^(\\s|\\u3000|\\xa0\\u00A0)+/, '');\r\n    };\r\n    IString.trimRight = function (str) {\r\n        return str.replace(/(\\s|\\u3000|\\xa0\\u00A0)+$/, '');\r\n    };\r\n    IString.valueOf = function (str) {\r\n        return str + '';\r\n    };\r\n    return IString;\r\n}());\r\nexport default IString;\r\nvar _CharToReplace = /[\\\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g;\r\nvar _Meta = {\r\n    \"\\b\": '\\\\b',\r\n    \"\\t\": '\\\\t',\r\n    \"\\n\": '\\\\n',\r\n    \"\\f\": '\\\\f',\r\n    \"\\r\": '\\\\r',\r\n    '\"': '\\\\\"',\r\n    \"\\\\\": '\\\\\\\\',\r\n    '\\v': '\\\\u000b'\r\n};\r\n"}
