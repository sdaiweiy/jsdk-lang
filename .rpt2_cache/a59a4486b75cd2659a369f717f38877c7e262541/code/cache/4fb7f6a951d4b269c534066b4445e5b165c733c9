{"code":"var IFunction = (function () {\r\n    function IFunction() {\r\n    }\r\n    IFunction.currying = function (fn) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var slice = Array.prototype.slice;\r\n        return function () {\r\n            var __inargs = slice.call(arguments);\r\n            return fn.apply(null, args.concat(__inargs));\r\n        };\r\n    };\r\n    IFunction.delay = function (func, delay) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        return setTimeout(function () {\r\n            return func.apply(null, args);\r\n        }, delay);\r\n    };\r\n    IFunction.emptyFunc = function () {\r\n        return new Function();\r\n    };\r\n    IFunction.isFunction = function (object) {\r\n        return Object.prototype.toString.call(object) === '[object Function]';\r\n    };\r\n    IFunction.bind = function (fn, context) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        return function () {\r\n            return fn.apply(context, args.concat(Array.prototype.slice.call(arguments)));\r\n        };\r\n    };\r\n    IFunction.throttle = function (fn, interval) {\r\n        var timer, firstTime = true;\r\n        return function () {\r\n            var args = arguments, _this = this;\r\n            if (firstTime) {\r\n                fn.apply(_this, args);\r\n                return firstTime = false;\r\n            }\r\n            if (timer) {\r\n                return false;\r\n            }\r\n            timer = setTimeout(function () {\r\n                clearTimeout(timer);\r\n                timer = null;\r\n                fn.apply(_this, args);\r\n            }, interval || 200);\r\n        };\r\n    };\r\n    return IFunction;\r\n}());\r\nexport default IFunction;\r\n"}
