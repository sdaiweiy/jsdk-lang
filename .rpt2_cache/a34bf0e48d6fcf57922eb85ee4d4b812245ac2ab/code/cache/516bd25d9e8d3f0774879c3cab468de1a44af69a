{"code":"import IObject from \"./IObject\";\r\nexport default class IArray {\r\n    static add(array, item, index = array.length) {\r\n        array.splice(index, 0, item);\r\n    }\r\n    static addAll(array, ...source) {\r\n        for (let i = 0, len = source.length; i < len; i++) {\r\n            let sub = source[i];\r\n            for (let j = 0, len1 = sub.length; j < len1; j++) {\r\n                array.push(sub[j]);\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n    static clear(array) {\r\n        array.length = 0;\r\n    }\r\n    static clone(array) {\r\n        return array.slice(0);\r\n    }\r\n    static contains(array, item) {\r\n        return this.indexOf(array, item) !== -1;\r\n    }\r\n    static each(array, iterator) {\r\n        for (let i = 0, len = array.length; i < len; i++) {\r\n            if (iterator(i, array[i], array) === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    static filter(array, fn) {\r\n        let result = [];\r\n        this.each(array, function (index, item) {\r\n            if (fn(index, item, array)) {\r\n                result.push(item);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    static indexOutOfBounds(array, index) {\r\n        return index < 0 || index >= array.length;\r\n    }\r\n    static isArray(object) {\r\n        if (!Array.isArray) {\r\n            return Object.prototype.toString.call(object) === '[object Array]';\r\n        }\r\n        return Array.isArray(object);\r\n    }\r\n    static isNullOrEmpty(array) {\r\n        return !this.isArray(array) || array.length == 0;\r\n    }\r\n    static isNotNullOrEmpty(array) {\r\n        return !this.isNullOrEmpty(array);\r\n    }\r\n    static indexOf(array, item, index = 0) {\r\n        for (let i = index, length = array.length; i < length; i++) {\r\n            if (IObject.equals(array[i], item)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    static join(array, separator) {\r\n        return Array.prototype.join.call(array, separator);\r\n    }\r\n    static lastIndexOf(array, item) {\r\n        for (let len = array.length - 1; len >= 0; len--) {\r\n            if (IObject.equals(array[len], item)) {\r\n                return len;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    static remove(array, index) {\r\n        if (this.indexOutOfBounds(array, index)) {\r\n            throw new RangeError(\"index out of bounds\");\r\n        }\r\n        return array.splice(index, 1)[0];\r\n    }\r\n    static removeByValue(array, item) {\r\n        return this.remove(array, this.indexOf(array, item));\r\n    }\r\n    static removeRange(array, startIndex, endIndex) {\r\n        if (this.indexOutOfBounds(array, startIndex) || this.indexOutOfBounds(array, endIndex)) {\r\n            throw new RangeError(\"startIndex or endIndex out of bounds\");\r\n        }\r\n        return array.splice(startIndex, (endIndex - startIndex));\r\n    }\r\n    static reverse(array) {\r\n        return array.reverse();\r\n    }\r\n    static sort(array, fn) {\r\n        return fn ? array.sort(fn) : array.sort();\r\n    }\r\n    static subArray(array, startIndex, endIndex = array.length) {\r\n        if (this.indexOutOfBounds(array, startIndex) || this.indexOutOfBounds(array, endIndex - 1)) {\r\n            throw new RangeError(\"startIndex or endIndex out of bounds\");\r\n        }\r\n        return Array.prototype.slice.call(array, startIndex, endIndex);\r\n    }\r\n    static toJson(array) {\r\n        let result = [\"[\", \"\"], len = array.length, i;\r\n        for (i = 0; i < len; i += 1) {\r\n            let val = IObject.toJson(array[i]);\r\n            if (val) {\r\n                result.push(val, ',');\r\n            }\r\n        }\r\n        result[result.length - 1] = ']';\r\n        return result.join(\"\");\r\n    }\r\n    static toString(array) {\r\n        return Array.prototype.toString.call(array);\r\n    }\r\n}\r\n","dts":{"name":"D:/work/jsdk-lang/dist/typings/IArray.d.ts","text":"export default class IArray {\r\n    static add<T>(array: T[], item: T, index?: number): void;\r\n    static addAll<T>(array: T[], ...source: T[][]): T[];\r\n    static clear<T>(array: T[]): void;\r\n    static clone<T>(array: T[]): T[];\r\n    static contains<T>(array: T[], item: T): boolean;\r\n    static each<T>(array: T[], iterator: (index: number, item: T, array: T[]) => (boolean | void)): void;\r\n    static filter<T>(array: T[], fn: (key: any, value: any, array: T[]) => (boolean)): T[];\r\n    static indexOutOfBounds<T>(array: T[], index: number): boolean;\r\n    static isArray(object: any): boolean;\r\n    static isNullOrEmpty<T>(array: T[]): boolean;\r\n    static isNotNullOrEmpty<T>(array: T[]): boolean;\r\n    static indexOf<T>(array: T[], item: T, index?: number): number;\r\n    static join<T>(array: T[], separator?: string): string;\r\n    static lastIndexOf<T>(array: T[], item: T): number;\r\n    static remove<T>(array: T[], index: number): T;\r\n    static removeByValue<T>(array: T[], item: T): T;\r\n    static removeRange<T>(array: T[], startIndex: number, endIndex: number): T[];\r\n    static reverse<T>(array: T[]): T[];\r\n    static sort<T>(array: T[], fn?: (a: T, b: T) => number): T[];\r\n    static subArray<T>(array: T[], startIndex: number, endIndex?: number): T[];\r\n    static toJson<T>(array: T[]): string;\r\n    static toString<T>(array: T[]): string;\r\n}\r\n"}}
