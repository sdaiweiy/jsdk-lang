{"code":"export default class INumber {\r\n    static isFinite(num) {\r\n        return isFinite(num) && !isNaN(parseFloat(num + \"\"));\r\n    }\r\n    static isNaN(num) {\r\n        return this.isNumber(num) && isNaN(num);\r\n    }\r\n    static isNumber(object) {\r\n        return Object.prototype.toString.call(object) === '[object Number]';\r\n    }\r\n    static max(...nums) {\r\n        return Math.max.apply(Math, nums);\r\n    }\r\n    static min(...nums) {\r\n        return Math.min.apply(Math, nums);\r\n    }\r\n    static parseFloat(num) {\r\n        return parseFloat(num);\r\n    }\r\n    static parseFloat1(num) {\r\n        let value = parseFloat(num);\r\n        return this.isNaN(value) ? 0.0 : value;\r\n    }\r\n    static parseInt(num, radix) {\r\n        return parseInt(num, radix ? radix : 10);\r\n    }\r\n    static parseInt1(num, radix) {\r\n        let value = parseInt(num, radix);\r\n        return this.isNaN(value) ? 0 : value;\r\n    }\r\n    static randomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n    static toFixed(num, decimal) {\r\n        decimal = decimal || 0;\r\n        let s = this.toString(num);\r\n        let decimalIndex = s.indexOf('.');\r\n        if (decimalIndex < 0) {\r\n            let fraction = '';\r\n            for (let i = 0; i < decimal; i++) {\r\n                fraction += '0';\r\n            }\r\n            return s + '.' + fraction;\r\n        }\r\n        let numDigits = s.length - 1 - decimalIndex;\r\n        if (numDigits <= decimal) {\r\n            let fraction = '';\r\n            for (let i = 0; i < decimal - numDigits; i++) {\r\n                fraction += '0';\r\n            }\r\n            return s + fraction;\r\n        }\r\n        let digits = s.split('');\r\n        let pos = decimalIndex + decimal;\r\n        let roundDigit = digits[pos + 1];\r\n        if (roundDigit > 4) {\r\n            if (pos == decimalIndex) {\r\n                --pos;\r\n            }\r\n            digits[pos] = Number(digits[pos] || 0) + 1;\r\n            while (digits[pos] == 10) {\r\n                digits[pos] = 0;\r\n                --pos;\r\n                if (pos == decimalIndex) {\r\n                    --pos;\r\n                }\r\n                digits[pos] = Number(digits[pos] || 0) + 1;\r\n            }\r\n        }\r\n        if (decimal == 0) {\r\n            decimal--;\r\n        }\r\n        return digits.slice(0, decimalIndex + decimal + 1).join('');\r\n    }\r\n    static toJson(num) {\r\n        return num;\r\n    }\r\n    static toString(num) {\r\n        return num + \"\";\r\n    }\r\n    static valueOf(object) {\r\n        return Number(object);\r\n    }\r\n}\r\n","dts":{"name":"D:/work/jsdk-lang/dist/typings/INumber.d.ts","text":"export default class INumber {\r\n    static isFinite(num: number): boolean;\r\n    static isNaN(num: number): boolean;\r\n    static isNumber(object: any): boolean;\r\n    static max(...nums: number[]): number;\r\n    static min(...nums: number[]): number;\r\n    static parseFloat(num: any): number;\r\n    static parseFloat1(num: any): number;\r\n    static parseInt(num: any, radix?: number): number;\r\n    static parseInt1(num: any, radix?: number): number;\r\n    static randomInt(min: number, max: number): number;\r\n    static toFixed(num: number, decimal: number): string;\r\n    static toJson(num: number): number;\r\n    static toString(num: number): string;\r\n    static valueOf(object: any): number;\r\n}\r\n"}}
