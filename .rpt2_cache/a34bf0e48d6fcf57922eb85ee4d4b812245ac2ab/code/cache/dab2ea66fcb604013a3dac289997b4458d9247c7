{"code":"import IString from \"./IString\";\r\nimport INumber from \"./INumber\";\r\nexport default class IDate {\r\n    static add(date, value, addType) {\r\n        let callFun = { 0: \"Year\", 1: \"Month\", 2: \"Day\", 3: \"Hours\", 4: \"Minutes\", 5: \"Seconds\", 6: \"Milliseconds\" };\r\n        let funSuffixName = callFun[addType];\r\n        if (!funSuffixName) {\r\n            throw new RangeError(\"addType value must between 0 and 6\");\r\n        }\r\n        IDate[\"set\" + funSuffixName](date, IDate[\"get\" + funSuffixName](date) + value);\r\n    }\r\n    static after(date, when) {\r\n        return this.compareTo(date, when) > 0;\r\n    }\r\n    static before(date, when) {\r\n        return this.compareTo(date, when) < 0;\r\n    }\r\n    static between(date, start, end) {\r\n        return this.after(date, start) && this.before(date, end);\r\n    }\r\n    static compareTo(date1, date2) {\r\n        return date1.getTime() - date2.getTime();\r\n    }\r\n    static format(date, pattern) {\r\n        if ('string' != typeof pattern) {\r\n            return date.toString();\r\n        }\r\n        function replacer(patternPart, result) {\r\n            pattern = pattern.replace(patternPart, result);\r\n        }\r\n        let year = date.getFullYear(), month = date.getMonth() + 1, date2 = date.getDate(), hours = date.getHours(), minutes = date.getMinutes(), seconds = date.getSeconds(), milliseconds = date.getMilliseconds();\r\n        replacer(/yyyy/g, IString.padLeft(year + \"\", 4, \"0\"));\r\n        replacer(/yy/g, IString.padLeft(parseInt(year.toString().slice(2), 10) + \"\", 2, \"0\"));\r\n        replacer(/MM/g, IString.padLeft(month + \"\", 2, \"0\"));\r\n        replacer(/M/g, month);\r\n        replacer(/dd/g, IString.padLeft(date2 + \"\", 2, \"0\"));\r\n        replacer(/d/g, date2);\r\n        replacer(/HH/g, IString.padLeft(hours + \"\", 2, \"0\"));\r\n        replacer(/H/g, hours);\r\n        replacer(/hh/g, IString.padLeft(hours % 12 + \"\", 2, \"0\"));\r\n        replacer(/h/g, hours % 12);\r\n        replacer(/mm/g, IString.padLeft(minutes + \"\", 2, \"0\"));\r\n        replacer(/m/g, minutes);\r\n        replacer(/ss/g, IString.padLeft(seconds + \"\", 2, \"0\"));\r\n        replacer(/s/g, seconds);\r\n        replacer(/SSS/g, IString.padLeft(milliseconds + \"\", 3, \"0\"));\r\n        return pattern;\r\n    }\r\n    static formatToFriendly(date, friendlyPattern) {\r\n        if (!friendlyPattern) {\r\n            friendlyPattern = {\r\n                \"刚刚\": 60,\r\n                \"一小时前\": 3600,\r\n                \"HH:mm\": 86400,\r\n                \"yyyy年MM月dd日\": -1\r\n            };\r\n        }\r\n        let now = new Date();\r\n        for (let pattern in friendlyPattern) {\r\n            let value = friendlyPattern[pattern];\r\n            if (-1 == value) {\r\n                return IDate.format(date, pattern);\r\n            }\r\n            if ((now.getTime() - date.getTime()) < value * 1000) {\r\n                return IDate.format(date, pattern);\r\n            }\r\n        }\r\n    }\r\n    static getDay(date) {\r\n        return date.getDate();\r\n    }\r\n    static getDayOfWeek(date) {\r\n        return date.getDay();\r\n    }\r\n    static getDayOfWeekInMonth(date) {\r\n        let day = this.getDayOfWeek(date), d = date.getDate();\r\n        return Math.ceil((d + 6 - day) / 7);\r\n    }\r\n    static getDayOfYear(date) {\r\n        let firstDay = new Date(date.getFullYear(), 0, 1);\r\n        return Math.ceil((date.getTime() - firstDay.getTime()) / (1000 * 60 * 60 * 24));\r\n    }\r\n    static getHours(date) {\r\n        return date.getHours();\r\n    }\r\n    static getMilliseconds(date) {\r\n        return date.getMilliseconds();\r\n    }\r\n    static getMinutes(date) {\r\n        return date.getMinutes();\r\n    }\r\n    static getMonth(date) {\r\n        return date.getMonth();\r\n    }\r\n    static getQuarter(date) {\r\n        return Math.floor((date.getMonth() + 3) / 3);\r\n    }\r\n    static getSeconds(date) {\r\n        return date.getSeconds();\r\n    }\r\n    static getTime(date) {\r\n        return date.getTime();\r\n    }\r\n    static getWeekOfMonth(date) {\r\n        let year = date.getFullYear(), month = date.getMonth(), first = new Date(year, month, 1).getDate(), last = 32 - new Date(year, month, 32).getDate();\r\n        return Math.ceil((first + last) / 7);\r\n    }\r\n    static getWeekOfYear(date) {\r\n        let year = date.getFullYear(), beginDay = new Date(year, 0, 1).getDay(), days = this.isLeapYear(year) ? 366 : 365;\r\n        return Math.ceil((days - beginDay) / 7.0);\r\n    }\r\n    static getYear(date) {\r\n        return date.getFullYear();\r\n    }\r\n    static isDate(date) {\r\n        return Object.prototype.toString.call(date) === '[object Date]';\r\n    }\r\n    static isLeapYear(value) {\r\n        if (this.isDate(value)) {\r\n            value = this.getYear(value);\r\n        }\r\n        if (INumber.isNumber(value)) {\r\n            return value % 4 == 0 && (value % 100 != 0 || value % 400 == 0);\r\n        }\r\n        return false;\r\n    }\r\n    static minus(startTime, endTime, diffType) {\r\n        let diff = endTime.getTime() - startTime.getTime();\r\n        let divisions = [24 * 3600 * 1000, 3600 * 1000, 60000, 1000, 1];\r\n        if (diffType < 2 || diffType > 6) {\r\n            throw new RangeError(\"diffType value must between 2 and 6\");\r\n        }\r\n        return INumber.parseInt(diff / divisions[diffType - 2]);\r\n    }\r\n    static now() {\r\n        return new Date().getTime();\r\n    }\r\n    static parse(str, pattern = \"yyyy-MM-dd\") {\r\n        let obj = { y: 0, M: 1, d: 0, H: 0, h: 0, m: 0, s: 0, S: 0 };\r\n        pattern.replace(/([^yMdHmsS]*?)(([yMdHmsS])\\3*)([^yMdHmsS]*?)/g, function (m, $1, $2, $3, $4, idx, old) {\r\n            str = str.replace(new RegExp($1 + '(\\\\d{1,' + $2.length + '})' + $4), function (_m, _$1) {\r\n                obj[$3] = parseInt(_$1);\r\n                return '';\r\n            });\r\n            return '';\r\n        });\r\n        obj.M--;\r\n        let date = new Date(obj.y, obj.M, obj.d, obj.H, obj.m, obj.s);\r\n        if (obj.S !== 0)\r\n            date.setMilliseconds(obj.S);\r\n        return date;\r\n    }\r\n    static setDay(date, day) {\r\n        date.setDate(day);\r\n    }\r\n    static setHours(date, hour) {\r\n        date.setHours(hour);\r\n    }\r\n    static setMilliseconds(date, millisec) {\r\n        date.setMilliseconds(millisec);\r\n    }\r\n    static setMinutes(date, min) {\r\n        date.setMinutes(min);\r\n    }\r\n    static setMonth(date, month) {\r\n        date.setMonth(month);\r\n    }\r\n    static setSeconds(date, sec) {\r\n        date.setSeconds(sec);\r\n    }\r\n    static setYear(date, year) {\r\n        date.setFullYear(year);\r\n    }\r\n    static setTime(date, millisec) {\r\n        date.setTime(millisec);\r\n    }\r\n    static toJson(date) {\r\n        let result = date.getFullYear() +\r\n            \"-\" + IString.padLeft(date.getMonth() + 1 + \"\", 2, \"0\") +\r\n            \"-\" + IString.padLeft(date.getDate() + \"\", 2, \"0\") +\r\n            \"T\" + IString.padLeft(date.getHours() + \"\", 2, \"0\") +\r\n            \":\" + IString.padLeft(date.getMinutes() + \"\", 2, \"0\") +\r\n            \":\" + IString.padLeft(date.getSeconds() + \"\", 2, \"0\") +\r\n            \".\" + IString.padLeft(date.getMilliseconds() + \"\", 3, \"0\") + \"Z\";\r\n        if (isLessIE7) {\r\n            result = '\"' + result + '\"';\r\n        }\r\n        return result;\r\n    }\r\n    static toString(date) {\r\n        return Date.prototype.toString.call(date);\r\n    }\r\n}\r\nIDate.YEAR = 0;\r\nIDate.MONTH = 1;\r\nIDate.DAY = 2;\r\nIDate.HOUR = 3;\r\nIDate.MINUTE = 4;\r\nIDate.SECOND = 5;\r\nIDate.MILLISECOND = 6;\r\nlet isLessIE7 = false;\r\ntry {\r\n    let version = navigator.appVersion.split(\";\")[1].replace(/[ ]/g, \"\");\r\n    isLessIE7 = (navigator.appName == \"Microsoft Internet Explorer\" && (version == \"MSIE6.0\" || version == \"MSIE7.0\"));\r\n}\r\ncatch (e) {\r\n    isLessIE7 = false;\r\n}\r\n","dts":{"name":"D:/work/jsdk-lang/dist/typings/IDate.d.ts","text":"export default class IDate {\r\n    static YEAR: number;\r\n    static MONTH: number;\r\n    static DAY: number;\r\n    static HOUR: number;\r\n    static MINUTE: number;\r\n    static SECOND: number;\r\n    static MILLISECOND: number;\r\n    static add(date: Date, value: number, addType: number): void;\r\n    static after(date: Date, when: Date): boolean;\r\n    static before(date: Date, when: Date): boolean;\r\n    static between(date: Date, start: Date, end: Date): boolean;\r\n    static compareTo(date1: Date, date2: Date): number;\r\n    static format(date: Date, pattern: string): string;\r\n    static formatToFriendly(date: Date, friendlyPattern?: {\r\n        [key: string]: number;\r\n    }): string;\r\n    static getDay(date: Date): number;\r\n    static getDayOfWeek(date: Date): number;\r\n    static getDayOfWeekInMonth(date: Date): number;\r\n    static getDayOfYear(date: Date): number;\r\n    static getHours(date: Date): number;\r\n    static getMilliseconds(date: Date): number;\r\n    static getMinutes(date: Date): number;\r\n    static getMonth(date: Date): number;\r\n    static getQuarter(date: any): number;\r\n    static getSeconds(date: Date): number;\r\n    static getTime(date: Date): number;\r\n    static getWeekOfMonth(date: Date): number;\r\n    static getWeekOfYear(date: Date): number;\r\n    static getYear(date: Date): number;\r\n    static isDate(date: any): boolean;\r\n    static isLeapYear(value: number | Date): boolean;\r\n    static minus(startTime: Date, endTime: Date, diffType: number): number;\r\n    static now(): number;\r\n    static parse(str: string, pattern?: string): Date;\r\n    static setDay(date: Date, day: number): void;\r\n    static setHours(date: Date, hour: number): void;\r\n    static setMilliseconds(date: Date, millisec: number): void;\r\n    static setMinutes(date: Date, min: number): void;\r\n    static setMonth(date: Date, month: number): void;\r\n    static setSeconds(date: Date, sec: number): void;\r\n    static setYear(date: Date, year: number): void;\r\n    static setTime(date: Date, millisec: number): void;\r\n    static toJson(date: Date): string;\r\n    static toString(date: Date): string;\r\n}\r\n"}}
